snippet "^lambda" "Prints my logo" rbA
# -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
#
#                .:-\`
#              \`+oooo\`
#              +-  :o+
#                   /o-
#                   .oo\`
#                   /oo:                dP                         oo
#                  \`oo+o\`               88
#                  :o:.o/      88d888b. 88d888b. .d8888b. 88d888b. dP .d8888b.
#                 \`oo\` /o.     88'  \`88 88'  \`88 88'  \`88 88'  \`88 88 88'  \`""
#                 :o+  \`oo\` \`  88.  .88 88    88 88.  .88 88    88 88 88.  ...
#         -/++++:.oo-   :oo++  88Y888P' dP    dP \`88888P' dP    dP dP \`88888P'
#        ++-..-:/ooo\`    .-.   88
#     \`--o+:------o+--\`        dP       http://lambdaphonic.de
#        \`/oo+///++\`
#           .-::-\`               Made with Sonic Pi (http://sonic-pi.net)
#
# -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-

$0
endsnippet

snippet "^clocks" "Clocks setup for SonicPi" rbA 
live_loop :clocks, auto_cue: false do
	cue ("clock" + (tick % 8).to_s).to_sym
	sleep 1
end

$0
endsnippet

snippet "^\s*echo" "Echo fx" rbA
with_fx(:echo, decay: 2.0, mix: 1.0, phase: 0.25) do
	$0
end
endsnippet

snippet "^\s*fx" "Generic FX" rbA
with_fx(:$1) do
	$0
end
endsnippet

snippet "^ll" "Live loop" rb
live_loop :$1 do
  $0
end
endsnippet

snippet "^ll4"  "Live loop on Beat 4" rbA
live_loop :$1, sync: :clock4 do
	$0
end
endsnippet

snippet "^ll8"  "Live loop on Beat 8" rbA
live_loop :$1, sync: :clock8 do
	$0
end
endsnippet

snippet "^markov" "Simple Markov chain setup" rbA
chain = {
	:i => [ :iv ],
	:iv => [ :v ],
	:v => [ :i ]
}

$0
endsnippet

snippet "^metropolism" "Metropolis inspired sequencer for modular" rbA
seq = cur_scale num_octaves: 1
steps = ${0:8}
pulse_counts = ring(1)
types = ring(:repeat)
dur = 0.125
with_fx :level, amp: 0 do
  norm_seq = seq.take steps
	norm_pulses = pulse_counts.take steps
	norm_types = types.take steps
	steps.times do
	  idx = tick
		current_note = norm_seq[idx]
		pulse_count = norm_pulses[idx]
		type = norm_types[idx]
		case type
		when :repeat
		  pulse_count.times do
			  m current_note, sustain: dur * 0.75
				sleep dur
		  end
		when :hold
		  m current_note, sustain: pulse_count * dur
			sleep (pulse_count * dur)
		when :tick
		  m current_note, sustain: dur
			sleep (pulse_count * dur)
		when :sleep
		  sleep (pulse_count * dur)
		end
	end
end
endsnippet

snippet "^metropolis" "Metropolis inspired sequencer" rb
seq = cur_scale num_octaves: 1
steps = 8
pulse_counts = ring(1)
types = ring(:repeat)
slides = bools(0)
dur = 0.125

with_fx :level, amp: ${1:0} do
	norm_seq = seq.take steps
	norm_pulses = pulse_counts.take steps
	norm_types = types.take steps
	norm_slides = slides.take steps
	s = play norm_seq[0], amp: 0, sustain: dur * norm_pulses.to_a.sum, release: dur
	steps.times do
		idx = tick
		current_note = norm_seq[idx]
		pulse_count = norm_pulses[idx]
		type = norm_types[idx]
		is_slide = norm_slides[idx + 1]
		case type
		when :repeat
			pulse_count.times do
				control s, amp: 1, note: current_note
				sleep dur / 2
				control s, amp: 0
				sleep dur / 2
			end
		when :hold
			control s, amp: 1, note: current_note
			sleep pulse_count * dur
			control s, amp: 0
		when :tick
			control s, amp: 1, note: current_note
			sleep dur / 2
			control s, amp: 0
			sleep (pulse_count * dur) - (dur / 2)
		when :sleep
			control s, amp: 0
			sleep pulse_count * dur
		end

		if is_slide then
			control s, note_slide: dur / 2
		else
			control s, note_slide: 0
		end
	end
end
endsnippet



snippet pi
pis="31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572"
\$pi=pis.split("").map \{ |v| v.to_i \}.ring

$0
endsnippet

snippet "^\s*reverb" "Reverb FX" rbA
with_fx(:reverb, room: 0.6, mix: 0.4, damp: 0.5) do
	$0
end
endsnippet

snippet "^live" "Live audio" rbA
with_fx(:reverb, room: 0.8, mix: 0.7, damp: 0.5) do
  live_audio :volcas, input: 1, amp: 1.5
end

live_audio :modular, input: 2, amp: 1.5

$0
endsnippet

